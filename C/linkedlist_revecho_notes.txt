
Add front
======
Addfront I took as reference 
http://stackoverflow.com/questions/12674616/c-adding-node-to-head-of-linked-list
Tranverse I took as reference 
P.250 Programming in C a Complete introduction to the the C Programming Language
Stephen G. Kochan 3er Edition

compareDouble from my lab2 part1 but modified 
flipsignDouble the most complex part was to return the pointer 
http://www.cplusplus.com/forum/beginner/13960/ I used as example 
findNode: I used as example to create my find node 
http://www.c4learn.com/data-structure/search-element-singly-linked-list/

addafter: 
http://www.cprogramming.com/snippets/source-code/singly-linked-list-insert-remove-add-count
popFront: I used to debug the pointer from here
http://www.learn-c.org/en/Linked_lists

Note: in findNode I used list->head and in popFront I used list.head 
in popFront  I got the error error: invalid type argument of '->' (have 'struct List')
and in findNode  request for member 'head' in something not a structure or union then 
I have to use ->

removeAllNodes: was pretty easy just implement in a method what 
professor did to test reverselist

AddAfter I got and infinite loop and then I was missing the prevNode set up

Makefile:
http://randu.org/tutorials/c/libraries.php



Revecho
======
Makefile:
I used as reference this stackoverflow
http://stackoverflow.com/questions/15117836/adding-shared-library-path-to-makefile
printString 
I added (char *) after this warning
warning: format '%s' expects argument of type 'char *', but argument 2 has type 'void *' [-Wformat]

revecho:
I took code ideas from  to get the argument and add to the list
it came handy to use addFront 
another solution would be addAfter and reverseList to get the same result

to compare two string I used as reference this examples
http://www.programmingsimplified.com/c-program-compare-two-strings
but I got so many errors 
I fixed doing this 
http://stackoverflow.com/questions/14992746/confusing-error-with-qsort-method

 findNode(&list, "dude", &compareString);// search list 
 I passed "dude" as string bevcause when I tried to do a vector I didn't get equals 
 I think it was \0 but I was short time to test 
 I made it work and leave it it

Part 1 valgrind
===============
valgrind --leak-check=yes  --track-origins=yes ./mylist-test
==30472== Memcheck, a memory error detector
==30472== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==30472== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==30472== Command: ./mytest
==30472==
testing addFront(): 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0
testing flipSignDouble(): -9.0 -8.0 -7.0 -6.0 -5.0 -4.0 -3.0 -2.0 -1.0
testing flipSignDouble() again: 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0
testing findNode(): OK
popped 9.0, the rest is: [ 8.0 7.0 6.0 5.0 4.0 3.0 2.0 1.0 ]
popped 8.0, the rest is: [ 7.0 6.0 5.0 4.0 3.0 2.0 1.0 ]
popped 7.0, the rest is: [ 6.0 5.0 4.0 3.0 2.0 1.0 ]
popped 6.0, the rest is: [ 5.0 4.0 3.0 2.0 1.0 ]
popped 5.0, the rest is: [ 4.0 3.0 2.0 1.0 ]
popped 4.0, the rest is: [ 3.0 2.0 1.0 ]
popped 3.0, the rest is: [ 2.0 1.0 ]
popped 2.0, the rest is: [ 1.0 ]
popped 1.0, the rest is: [ ]
testing addAfter(): 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0
popped 1.0, and reversed the rest: [ 9.0 8.0 7.0 6.0 5.0 4.0 3.0 2.0 ]
popped 9.0, and reversed the rest: [ 2.0 3.0 4.0 5.0 6.0 7.0 8.0 ]
popped 2.0, and reversed the rest: [ 8.0 7.0 6.0 5.0 4.0 3.0 ]
popped 8.0, and reversed the rest: [ 3.0 4.0 5.0 6.0 7.0 ]
popped 3.0, and reversed the rest: [ 7.0 6.0 5.0 4.0 ]
popped 7.0, and reversed the rest: [ 4.0 5.0 6.0 ]
popped 4.0, and reversed the rest: [ 6.0 5.0 ]
popped 6.0, and reversed the rest: [ 5.0 ]
popped 5.0, and reversed the rest: [ ]
==30472==
==30472== HEAP SUMMARY:
==30472==     in use at exit: 0 bytes in 0 blocks
==30472==   total heap usage: 18 allocs, 18 frees, 288 bytes allocated
==30472==
==30472== All heap blocks were freed -- no leaks are possible
==30472==
==30472== For counts of detected and suppressed errors, rerun with: -v
==30472== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)

Part 2 valgrind
===============
valgrind --leak-check=yes  --track-origins=yes ./revecho hello world friend
==10845== Memcheck, a memory error detector
==10845== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==10845== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==10845== Command: ./revecho hello world friend
==10845==
friend
world
hello

dude not found

==10845==
==10845== HEAP SUMMARY:
==10845==     in use at exit: 0 bytes in 0 blocks
==10845==   total heap usage: 3 allocs, 3 frees, 48 bytes allocated
==10845==
==10845== All heap blocks were freed -- no leaks are possible
==10845==
==10845== For counts of detected and suppressed errors, rerun with: -v
==10845== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)


valgrind --leak-check=yes  --track-origins=yes ./revecho hello world dude
==11277== Memcheck, a memory error detector
==11277== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==11277== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==11277== Command: ./revecho hello world dude
==11277==
dude
world
hello

dude  found

==11277==
==11277== HEAP SUMMARY:
==11277==     in use at exit: 0 bytes in 0 blocks
==11277==   total heap usage: 3 allocs, 3 frees, 48 bytes allocated
==11277==
==11277== All heap blocks were freed -- no leaks are possible
==11277==
==11277== For counts of detected and suppressed errors, rerun with: -v
==11277== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)

